name: Test and Analysis Code In Sonar Cloud
on:
  workflow_call:

  push:
    branches: 
      - hotfix/*
      - feature/*
      - bugfix/*  

  pull_request:
    types: [opened, synchronize, reopened]
    branches:       
      - hotfix/*
      - feature/*
      - bugfix/*  

jobs:
  test_code_in_sonar_net:
    name: Test Code in Sonar Cloud
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        id: cache-sonar
        uses: actions/cache@v3        
        with:        
            path: ~\sonar\cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
      
      - name: Create if not Exist Cache Sonar Packages
        if: steps.cache-sonar.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ~\sonar\cache -ItemType Directory    
        
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
            path: .\.sonar\scanner
            key: ${{ runner.os }}-sonar-scanner
            restore-keys: ${{ runner.os }}-sonar-scanner      
          
      
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
    
      - name: Build and analyze
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |                    
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"alexfariakof_BACEN-Expectativas-de-Mercado" /o:"alexfariakof" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.exclusions="Expectativas_de_Mercado.WPF/**, Expectativas_de_Mercado.XUnit/**/*.cs, Expectativas_de_Mercado.Migrations/**, **/Program.cs,, **/AssemblyInfo.cs, **/*.xaml " /d:sonar.cs.lcov.reportPaths="**/coveragereport/lcov.info"          
          
            dotnet tool install -g dotnet-reportgenerator-globaltool
            dotnet test ./Expectativas_de_Mercado.XUnit/Expectativas_de_Mercado.XUnit.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect:"XPlat Code Coverage;Format=opencover"
            
            $baseDirectory = Join-Path -Path (Get-Location) -ChildPath ""
            $projectTestPath = Join-Path -Path (Get-Location) -ChildPath "Expectativas_de_Mercado.XUnit"
            $sourceDirs = "$baseDirectory\Expectativas_de_Mercado.ViewModel;$baseDirectory\Expectativas_de_Mercado.Repository;$baseDirectory\Expectativas_de_Mercado.Model;$baseDirectory\Bacen.Integration;"
            $coverageXmlPath = Join-Path -Path (Join-Path -Path $projectTestPath -ChildPath "TestResults") -ChildPath "coveragereport"
            $filefilters = "-$projectPath\Expectativas_de_Mercado.XUnit\**;-$projectPath\Expectativas_de_Mercado.WPF\**;-$projectPath\Expectativas_de_Mercado.Migrations\**;"
            reportgenerator -reports:$projectTestPath\coverage.cobertura.xml -targetdir:$coverageXmlPath\coveragereport -reporttypes:"lcov;" -sourcedirs:$sourceDirs -filefilters:$$filefilters 
            
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  
